#!/usr/bin/env bash
#
# Manage encrypted disk images
#

__NAME__=cdisk
__VERSION__=0.1.0

#
# XDG defaults
#
data_home=${XDG_DATA_HOME:-$HOME/.local/share}
config_home=${XDG_CONFIG_HOME:-$HOME/.config}

#
# Default locations
#
disks=${CDISK_DISKS:-$data_home/cdisk/disks}
headers=${CDISK_HEADERS:-$data_home/cdisk/headers}
keys=${CDISK_KEYS:-$data_home/cdisk/keys}
mounts=${CDISK_MOUNTS:-$HOME}
configs=${CDISK_CONFIGS:-$config_home/cdisk/disks}
config=${CDISK_CONFIG:-$config_home/cdisk/cdisk.cfg}

#
# Config values
#
c_disk=
c_keyfile=
c_header=
c_mapper=
c_mount=

#
# Default options
#

# verbosity
verbose=0

# options for cryptsetup creation
crypt_create=(
    --verbose
    --align-payload 8192
    --cipher aes-xts-plain64
    --hash sha512
    --iter-time 5000
    --key-size 512
    --type luks2
    --use-random
)

# options for cryptsetup open
crypt_open=(
    --type luks2
)

# options for securing keys with gpg
secure_key=(
    --verbose
    --cipher-algo aes256
    --digest-algo sha512
    --symmetric
    --armor
)

##################################################
# User Interface
##################################################

show_version() { printf '%s %s\n' "$__NAME__" "$__VERSION__"; }

# fun: show_help
# txt: show help
show_help()
{
    self=${0##*/}
    cat << EOF
NAME
    $self - Manage encrypted disk images

USAGE
    $self create NAME SIZE
    $self open NAME
    $self close NAME
    $self destroy NAME
    $self list
    $self list-open

COMMANDS
    create NAME SIZE
        Create a new encrypted image
        NAME    name of disk
        SIZE    size of disk

    open NAME
        Open and mount a disk
        NAME    name of disk

    close NAME
        Unmount and close a disk
        NAME    name of disk

    destroy NAME
        Destroy disk image
        NAME    name of disk

    list
        list disks

    list-open
        list opened disks

CONFIGURATION
    The global configuration script will be sourced if it exists, followed by
    the by a disk specific configuration if it exists. The configuration file
    can override methods or define the following to override the defaults:
        c_keyfile - path to encrypted keyfile
        c_disk - path to disk image
        c_header - path to disk header
        c_mapper - path to mapper
        c_mount - path to mount disk at

    Additionally, you can define an "init" function which will be called before
    any operation. This can be used, for example, to check for the existence of
    some external media which is intended to store headers and keys


ENVIRONMENT VARIABLES
    CDISK_DISKS
        Defines the path to directory of disk files

    CDISK_HEADERS
        Defines path to directory of header files

    CDISK_KEYS
        Defines path to directory of key files

    CDISK_MOUNTS
        Defines path to directory to mount disks at

    CDISK_CONFIGS
        Defines path to directory to look for named disk configs

    CDISK_CONFIG
        Defines path to global config file

SEE ALSO
    gpg(1), cryptsetup(8)

EOF
    show_config
}

# fun: show_config
# txt: show current configuration
show_config()
{
    printf '%s\n' "CURRENT CONFIGURATION "
    for cfg in disks headers keys mounts configs config; do
        printf '    %-9s %s\n' "$cfg:" "${!cfg}"
    done

    for val in c_keyfile c_disk c_header c_mapper c_mount; do
        [[ "${!val}" ]] &&
            printf '    %-9s %s\n' "$val:" "${!val}"
    done
}


# fun: die msg
# param: msg: message to display
# txt: print msg to stderr and exit 1
die() {
    printf '%s\n' "$*" >&2
    exit 1
}

# fun: err msg
# param: msg: message to display
# txt: print msg to stderr
err() {
    printf '%s\n' "$*" >&2
}

# fun: info msg
# param: msg: message to display
# txt: print msg to stderr if verbosity allows
info() {
    ((verbose>0)) && printf '%s\n' "$*" >&2
}

# fun: debug msg
# param: msg: message to display
# txt: print msg to stderr if verbosity allows
debug() {
    ((verbose>1)) && printf '%s\n' "$*" >&2
}

##################################################
# Getters
##################################################

# fun: get_keyfile name
# param: name: name of disk
# txt: print the path to keyfile
get_keyfile()
{
    [[ "$c_keyfile" ]] && printf %s "$c_keyfile" && return
    printf '%s/%s.key.gpg' "$keys" "$1"
}

# fun: get_disk name
# param: name: name of disk
# txt: print the path to disk
get_disk()
{
    [[ "$c_disk" ]] && printf %s "$c_disk" && return
    printf '%s/%s.luks' "$disks" "$1"
}

# fun: get_header name
# param: name: name of disk
# txt: print the path to header
get_header()
{
    [[ "$c_header" ]] && printf %s "$c_header" && return
    printf '%s/%s.header' "$headers" "$1"
}

# fun: get_mapper name
# param: name: name of disk
# txt: print the path to mapper
get_mapper()
{
    [[ "$c_mapper" ]] && printf %s "$c_mapper" && return
    printf 'cdisk--%s' "${1//\//_}"
}

# fun: get_mount name
# param: name: name of disk
# txt: print the path to mount point
get_mount()
{
    [[ "$c_mount" ]] && printf %s "$c_mount" && return
    printf '%s/%s' "$mounts" "$1"
}

# fun: get_config name
# param: name: name of disk
# txt: print the path to disk config
get_config()
{
    printf '%s/%s.cfg' "$configs" "$1"
}


##################################################
# FSIO
##################################################

# fun: touch_disk img size
# param: img: path to image
# param: size: size of image
# txt: create a disk image
touch_disk()
{
    local disk=$1
    local size=$2
    info "Creating $size image at $disk"
    [[ -e "$disk" ]] && die "$disk already exists"
    mkdir -vp "${disk%/*}"
    fallocate -l "$size" "$disk" && chmod 600 "$disk"
}

# fun: touch_header img
# param: img: path to image
# txt: create a header image
touch_header()
{
    info "Creating header at $1"
    [[ -e "$1" ]] && die "$1 already exists"
    mkdir -vp "${1%/*}"
    fallocate -l 4M "$1" && chmod 600 "$1"
}

# fun: store_key file
# param: file: path to persisted key
# txt: encrypt stdin to keyfile
store_key()
{
    [[ -e "$1" ]] && die "$1 already exists"
    mkdir -vp "${1%/*}"
    gpg "${secure_key[@]}" --output "$1" || die "Could not secure key"
    chmod 400 "$1"
}


##################################################
# Methods
##################################################

# fun: init
# txt: can be overridden by configs
init()
{
    # turnkey to be overridden in configs
    return
}

# fun: img_to_name
# txt: reads from stdin and convers disk file paths to names
img_to_name() {
    local path
    while read -r path; do
        [[ $path = "$disks"* ]] || continue
        path=${path#"$disks/"}
        path=${path%.luks};
        printf '%s\n' "$path";
    done | sort
}

# fun: generate_key
# txt: generates random key
generate_key()
{
    info "Generating key"
    dd if=/dev/urandom bs=1 count=4096
}

# fun: read_key name
# param: name: name of disk
# txt: reads a keyfile
read_key()
{
    local name=$1
    [[ "$name" ]] || die "No name specified"
    local -r keyfile="$(get_keyfile "$name")"
    info "Reading key at $keyfile"
    [[ -f "$keyfile" ]] || die "$keyfile does not exist"
    gpg -d "$keyfile" 2>/dev/null || die "Failed to read key"
}

# fun: open_disk name
# param: name: name of disk
# txt: opens a disk
open_disk()
{
    local -r name="$1"

    [[ "$name" ]] || die "No name specified"

    local -r disk="$(get_disk "$name")"
    local -r header="$(get_header "$name")"
    local -r mapper="$(get_mapper "$name")"

    [[ -e "$disk" ]] || die "$disk does not exist"
    [[ -f "$header" ]] || die "$header does not exist"
    [[ -e "/dev/mapper/$mapper" ]] && die "mapper $mapper in use"

    info "Opening $name" "-header: $header" "-mapper: $mapper"

    crypt_opt=(
        open
        "${crypt_open[@]}" #configd crypt options
        --key-file - # Read key from stdin
        --header "$header"
        "$disk"
        "$mapper"
    )

    debug "Crypt Options:" "${crypt_opt[@]}"

    sudo cryptsetup "${crypt_opt[@]}" || die "Failed to open"
}

# fun: is_open name
# param: name: name of disk
# txt: returns 0 if open otherwise 1
is_open()
{
    local -r name="$1"

    local mappername mountpoint disk mapper device backfile

    [[ "$name" ]] || die "No name specified"

    mappername=$(get_mapper "$name")
    mountpoint=$(get_mount "$name")
    disk=$(get_disk "$name")
    disk=$(readlink -f "$disk")

    mountpoint -q "$mountpoint" || return 1
    mapper=$(findmnt -n -o SOURCE  --mountpoint "$mountpoint")
    [[ "$mapper" == "/dev/mapper/$mappername" ]] || return 1

    while read -r device; do
        if [[ "$device" == loop* ]]; then
            backfile=$(losetup --list --noheadings --output BACK-FILE "/dev/$device")
            [[ "$backfile" == "$disk" ]] && return 0
        else
            [[ "/dev/$device" == "$disk" ]] && return 0
        fi
    done < <(mapper_slaves "$mapper")

    return 1
}

# fun: mapper_slaves mapper_path
# param: mapper_path: path to mapper
# txt: print mapper slaves
mapper_slaves() {
    local dm
    dm=$(readlink -f "$1")
    dm=${dm##*/}

    while read -r slave ; do
        printf '%s\n' "${slave##*/}"
    done < <(readlink -f /sys/block/"$dm"/slaves/*)
}

# fun: mount_disk name
# param: name: name of disk
# txt: mounts a disk
mount_disk()
{
    local name=$1

    [[ "$name" ]] || die "No name specified"

    local -r mapper="$(get_mapper "$name")"
    local -r mount="$(get_mount "$name")"
    info "Mounting disk at $mount"
    mkdir -vp "$mount" || die "Couldn't create mount point"
    sudo mount /dev/mapper/"$mapper" "$mount" || die "Failed to mount"
}

# fun: load_config name
# param: name: name of disk
# txt: loads a named disk config
load_config()
{
    [[ "$1" ]] || die "No name specified"
    local -r config="$(get_config "$1")"
    # shellcheck source=/dev/null
    [[ -f "$config" ]] && {
        info "Loading config at $config"
        source "$config" || die "bad config"
    }
}

# fun: post_create name
# param: name: name of disk
# txt: post create hook. creates filesystem, and owns it
post_create()
{
    local name=$1

    [[ "$name" ]] || die "No name specified"

    local -r mapper="$(get_mapper "$name")"
    local -r mount="$(get_mount "$name")"

    sudo mkfs.ext4 -L "$name" /dev/mapper/"$mapper" ||
        die "Couldn't make filesystem on disk"

    mount_disk "$name"             || die "Couldn't mount disk"
    sudo chown -R "$USER" "$mount" || die "Couldn't own disk"
    chmod 700 "$mount"
}


##################################################
# Commands
##################################################

# fun: cmd_create name size
# param: name: name of disk
# param: size: size of disk
# txt: creates an encrypted disk image
cmd_create()
{
    local name=$1
    local size=$2

    [[ "$name" ]] || die "No name specified"
    [[ "$size" ]] || die "No size specified"

    local  key
    local -r keyfile="$(get_keyfile "$name")"
    local -r disk="$(get_disk "$name")"
    local -r header="$(get_header "$name")"


    key=$(generate_key | base64 )               || die "Couldn't generate key"
    base64 -d <<< "$key" | store_key "$keyfile" || die "Couldn't store key"
    touch_disk "$disk" "$size"                  || die "Couldn't create disk image"
    touch_header "$header"                      || die "Couldn't create disk header"

    local crypt_opt=(
        luksFormat
        "${crypt_create[@]}"
        --header "$header"
        "$disk"
        - # Read key from stdin
    )

    debug "Crypt Options:" "${crypt_opt[@]}"

    base64 -d <<< "$key" | cryptsetup "${crypt_opt[@]}" ||
        die "Couldn't format disk"

    base64 -d <<< "$key" | open_disk "$name" ||
        die "Couldn't open disk"

    post_create "$name" || die "Post create failed"
}

# fun: cmd_destroy name
# param: name: name of disk
# txt: delete encrypted disk image
cmd_destroy()
{
    local name=$1

    [[ "$name" ]] || die "No name specified"

    local -r keyfile="$(get_keyfile "$name")"
    local -r disk="$(get_disk "$name")"
    local -r header="$(get_header "$name")"

    is_open "$name" && { cmd_close "$name" || die "couldn't close $name"; }

    printf 'Remove the following:\n'
    for val in keyfile disk header; do
        printf '%-9s %s\n' "$val:" "${!val}"
    done

    read -r -p '[type YES (uppercase) to confirm] '
    if [[ "$REPLY" == "YES" ]]; then
        rm -v "$keyfile" "$disk" "$header" ||
            die "Failed to destroy $name"
        return
    fi
    printf '%s\n' "Canceled"
}

# fun: cmd_open name
# param: name: name of disk
# txt: open sncrypted image
cmd_open()
{
    local name=$1

    [[ "$name" ]] || die "No name specified"

    is_open "$name" && die "$name already open"
    read_key "$name" | open_disk "$name" || die "Couldn't open disk"
    mount_disk "$name" || die "Couldn't mount disk"
}

# fun: cmd_close name
# param: name: name of disk
# txt: close sncrypted image
cmd_close()
{
    local name=$1

    [[ "$name" ]] || die "No name specified"

    local -r mapper="$(get_mapper "$name")"
    local -r mount="$(get_mount "$name")"
    is_open "$name"                 || die "$name not open"
    sudo umount "$mount"            || die "Couldn't unmount"
    sudo cryptsetup close "$mapper" || die "Couldn't close"
    rmdir "$mount"                  || die "Couldn't rm mount"
}

# fun: cmd_list
# txt: list all disks
cmd_list() {
    local i
    for i in "$disks"/*.luks "$configs"/*.cfg; do
        [[ -f "$i" ]] || continue
        i="${i##*/}"
        printf '%s\n' "${i%.*}"
    done | sort -u
}

# fun: cmd_list_open
# txt: list all opened disks
cmd_list_open() {
    local i
    while read -r i; do
        is_open "$i" && printf '%s\n' "$i"
    done < <(cmd_list)
}

##################################################
# Main
##################################################

while :; do
    case $1 in
        -h|-\?|--help) show_help=true ;;
        -v|--verbose)  verbose=$((verbose + 1)) ;;
        --version)  show_version ; exit ;;

        -c|--config)
            if [ "$2" ]; then
                config=$2
                shift
            else
                die 'ERROR: "--config" requires a non-empty option argument.'
            fi
            ;;
        --config=?*) config=${1#*=} ;;
        --config=) die 'ERROR: "--config" requires a non-empty option argument.' ;;


        --) shift; break ;;
        -?*) printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2 ;;
        *) break
    ;; esac

    shift
done


cmd="$1"
shift


# load main config
[[ -f "$config" ]] && {
    info "Loading config at $config"
    # shellcheck source=/dev/null
    source "$config" || die "bad config"
}

# load named disk config
[[ -n "$1" ]] && load_config "$1"

# show help after loading configs
if [[ "$show_help" == true ]]; then
    show_help
    exit
fi

init # run config init

case "$cmd" in
    create)    cmd_create  "$@" ;;
    open)      cmd_open    "$@" ;;
    close)     cmd_close   "$@" ;;
    destroy)   cmd_destroy "$@" ;;
    config)    show_config ;;
    list|ls)   cmd_list         ;;
    list-open) cmd_list_open    ;;
    is-open)   is_open "$@" ;;
    *)  show_help ;;
esac

